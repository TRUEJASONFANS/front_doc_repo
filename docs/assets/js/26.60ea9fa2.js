(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{233:function(t,a,e){"use strict";e.r(a);var s=e(1),r=Object(s.a)({},function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"umi"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#umi","aria-hidden":"true"}},[t._v("#")]),t._v(" Umi")]),t._v(" "),e("h2",{attrs:{id:"历史"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#历史","aria-hidden":"true"}},[t._v("#")]),t._v(" 历史")]),t._v(" "),e("p",[t._v("“2015 年之前我们有 Sea.JS、Arale、SPM 开源技术方案，大家可以有所耳闻。\n2015 年我们接入 React，从自研的 Roof 到 Redux 再到开源的 Dva，一步步验证我们的最佳实践，并把这些实践交给开源社区检验。\n2017 年开始尝试了新一代的企业级前端框架，Umi 和 Bigfish，前者是从无线业务中长出来的，后者是从中台业务中长出来的。\n一个团队出两个框架毕竟不是长久之计，后来老大直接把两拨人调到一个组，于是就愉快地合并在了一起。”\n"),e("img",{attrs:{src:"http://5b0988e595225.cdn.sohucs.com/images/20190717/8e42b0fbccba4ff48a4f7f9f2acbdcc5.jpeg",alt:"历史"}})]),t._v(" "),e("h2",{attrs:{id:"两个框架融合之和"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#两个框架融合之和","aria-hidden":"true"}},[t._v("#")]),t._v(" 两个框架融合之和")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://5b0988e595225.cdn.sohucs.com/images/20190717/7c6ab855060444f281cdc424d2221fba.jpeg",alt:"两个框架融合之和"}})]),t._v(" "),e("p",[t._v("内部数据：")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://5b0988e595225.cdn.sohucs.com/images/20190717/8f84ae3045ba4e7c9dd218a876e1c790.jpeg",alt:"内部数据"}})]),t._v(" "),e("h2",{attrs:{id:"理论基础"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#理论基础","aria-hidden":"true"}},[t._v("#")]),t._v(" 理论基础")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://shipusercontent.com/5af08fa4045b39c3110110510422527b/Pasted%20Image%202.png",alt:"Utilize compiler"}}),t._v(" "),e("a",{attrs:{href:"https://hackmd.io/@UXqYDTxCTie91Shvsppqyw/ByGeBtv9z?type=view#%E6%8F%92%E4%BB%B6%E6%9C%BA%E5%88%B6",target:"_blank",rel:"noopener noreferrer"}},[t._v("umi as a Compiler (Full Version)"),e("OutboundLink")],1)]),t._v(" "),e("h2",{attrs:{id:"架构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#架构","aria-hidden":"true"}},[t._v("#")]),t._v(" 架构")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://gw.alipayobjects.com/zos/rmsportal/zvfEXesXdgTzWYZCuHLe.png",alt:"架构"}})]),t._v(" "),e("h2",{attrs:{id:"插件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#插件","aria-hidden":"true"}},[t._v("#")]),t._v(" 插件")]),t._v(" "),e("p",[t._v("市场：\n"),e("img",{attrs:{src:"http://5b0988e595225.cdn.sohucs.com/images/20190717/3fe672829b914e7994c8078f6e923654.jpeg",alt:"UMI"}}),t._v(" "),e("img",{attrs:{src:"http://5b0988e595225.cdn.sohucs.com/images/20190717/1e007f12a4ff42cea0b50ffe5f5020f8.jpeg",alt:"bigsh&&UMI市场"}})]),t._v(" "),e("h2",{attrs:{id:"资产市场"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#资产市场","aria-hidden":"true"}},[t._v("#")]),t._v(" 资产市场")]),t._v(" "),e("p",[t._v("资产市场分了四级:")]),t._v(" "),e("ol",[e("li",[t._v("组件，指通用组件，就是 antd，在下半年将要发布的 antd@4 里，我们会陆续提取更多通用组件到 antd 中。")]),t._v(" "),e("li",[t._v("业务组件，不能提取通用组件的，我们会提到内部统一的业务组件仓库中。")]),t._v(" "),e("li",[t._v("区块，由组件组成，可以想象成代码片段。")]),t._v(" "),e("li",[t._v("页面模板，由区块组成")])]),t._v(" "),e("h2",{attrs:{id:"如何兼顾多类技术栈"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何兼顾多类技术栈","aria-hidden":"true"}},[t._v("#")]),t._v(" 如何兼顾多类技术栈")]),t._v(" "),e("ol",[e("li",[t._v("MPA（多页应用）")]),t._v(" "),e("li",[t._v("微前端")])]),t._v(" "),e("h2",{attrs:{id:"设计理念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#设计理念","aria-hidden":"true"}},[t._v("#")]),t._v(" 设计理念")]),t._v(" "),e("p",[t._v("React 的核心概念就是组件。UMI框架的主要功能，就是定义了一套编写和使用组件的规范\n![UMI前端代码层次]](https://gw.alipayobjects.com/zos/rmsportal/trbRYJugHYeODogmIgwi.png)\n上图中，左侧是服务端代码的层次结构，由 Controller、Service、Data Access 三层组成服务端系统：")]),t._v(" "),e("ol",[e("li",[t._v("Controller 层负责与用户直接打交道，渲染页面、提供接口等，侧重于展示型逻辑。")]),t._v(" "),e("li",[t._v("Service 层负责处理业务逻辑，供 Controller 层调用。")]),t._v(" "),e("li",[t._v("Data Access 层顾名思义，负责与数据源对接，进行纯粹的数据读写，供 Service 层调用。\n上图的右侧是前端代码的结构，同样需要进行必要的分层：")]),t._v(" "),e("li",[t._v("Page 负责与用户直接打交道：渲染页面、接受用户的操作输入，侧重于展示型交互性逻辑。")]),t._v(" "),e("li",[t._v("Model 负责处理业务逻辑，为 Page 做数据、状态的读写、变换、暂存等。")]),t._v(" "),e("li",[t._v("Service 负责与 HTTP 接口对接，进行纯粹的数据读写。")])]),t._v(" "),e("h2",{attrs:{id:"react-react-redux-redux-saga-dva"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react-react-redux-redux-saga-dva","aria-hidden":"true"}},[t._v("#")]),t._v(" React -> React Redux -> Redux saga-> Dva")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://www.yuque.com/flying.ni/the-tower/tvzasn",target:"_blank",rel:"noopener noreferrer"}},[t._v("图解React->React Redux-> Redux sage-> Dva"),e("OutboundLink")],1)]),t._v(" "),e("h2",{attrs:{id:"model"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#model","aria-hidden":"true"}},[t._v("#")]),t._v(" Model")]),t._v(" "),e("p",[t._v("Model 是前端分层中的腰部力量，承上启下，负责管理数据（状态）。业界主流的状态管理类库有 redux、mobx，等。在我们的教程中，则使用 DVA 框架承担这一角色。")]),t._v(" "),e("div",{staticClass:"language-ts extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ts"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 打开dva")]),t._v("\n  plugins"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'umi-plugin-react'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      antd"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      dva"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("Model 示例")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("app.model({\n\n  namespace: 'todoList',\n\n  state: [],\n\n  effects: {\n    *query({ _ }, { put, call }) {\n      const rsp = yield call(queryTodoListFromServer);\n      const todoList = rsp.data;\n      yield put({ type: 'save', payload: todoList });\n    },\n  },\n\n  reducers: {\n    save(state, { payload: todoList }) {\n      return [...state, todoList];\n    },\n  },\n\n});\n")])])]),e("ol",[e("li",[t._v("namespace：model 的命名空间，只能用字符串。一个大型应用可能包含多个 model，通过namespace区分。")]),t._v(" "),e("li",[t._v("state：当前 model 状态的初始值，表示当前状态。")]),t._v(" "),e("li",[t._v("reducers：用于处理同步操作，可以修改 state，由 action 触发。reducer 是一个纯函数，它接受当前的 state 及一个 action 对象。action 对象里面可以包含数据体（payload）作为入参，需要返回一个新的 state。")]),t._v(" "),e("li",[t._v("effects：用于处理异步操作（例如：与服务端交互）和业务逻辑，也是由 action 触发。但是，它不可以修改 state，要通过触发 action 调用 reducer 实现对 state 的间接操作。")]),t._v(" "),e("li",[t._v("action：是 reducers 及 effects 的触发器，一般是一个对象，形如{ type: 'add', payload: todo }，通过 type 属性可以匹配到具体某个 reducer 或者 effect，payload 属性则是数据体，用于传送给 reducer 或 effect。")])])])},[],!1,null,null,null);a.default=r.exports}}]);