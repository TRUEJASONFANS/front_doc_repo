(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{215:function(t,e,n){"use strict";n.r(e);var a=n(1),o=Object(a.a)({},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"三大周期"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三大周期","aria-hidden":"true"}},[t._v("#")]),t._v(" 三大周期")]),t._v(" "),n("p",[t._v("Mounting：已插入真实 DOM\nUpdating：正在被重新渲染\nUnmounting：已移出真实 DOM")]),t._v(" "),n("h2",{attrs:{id:"一些生命周期方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一些生命周期方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 一些生命周期方法")]),t._v(" "),n("ol",[n("li",[n("p",[t._v("componentWillMount 在渲染前调用,在客户端也在服务端。")])]),t._v(" "),n("li",[n("p",[t._v("componentDidMount(在第一次渲染后调用) : 在第一次渲染后调用，只在客户端。之后组件已经生成了对应的DOM结构，可以通过this.getDOMNode()来进行访问。 如果你想和其他JavaScript框架一起使用，可以在这个方法中调用setTimeout, setInterval或者发送AJAX请求等操作(防止异步操作阻塞UI)。")])]),t._v(" "),n("li",[n("p",[t._v("componentWillReceiveProps 在组件接收到一个新的 prop (更新后)时被调用。这个方法在初始化render时不会被调用。")])]),t._v(" "),n("li",[n("p",[t._v("shouldComponentUpdate 返回一个布尔值。在组件接收到新的props或者state时被调用。在初始化时或者使用forceUpdate时不被调用。\n可以在你确认不需要更新组件时使用。")])]),t._v(" "),n("li",[n("p",[t._v("componentWillUpdate(第一次渲染时候不调用用):在组件接收到新的props或者state但还没有render时被调用。在初始化时不会被调用。")])]),t._v(" "),n("li",[n("p",[t._v("componentDidUpdate 在组件完成更新后即调用。在初始化时不会被调用。")])]),t._v(" "),n("li",[n("p",[t._v("componentWillUnmount在组件从 DOM 中移除之前立刻被调用。")])])]),t._v(" "),n("h2",{attrs:{id:"hook-使你在无需修改组件结构的情况下复用状态逻辑"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#hook-使你在无需修改组件结构的情况下复用状态逻辑","aria-hidden":"true"}},[t._v("#")]),t._v(" Hook 使你在无需修改组件结构的情况下复用状态逻辑")]),t._v(" "),n("p",[t._v("理解每一次的 Rendering\n每一次渲染都有它自己的 Props and State\n每一次渲染都有它自己的事件处理函数\n每次渲染都有它自己的 Effects\nHook 不能在 class 组件中使用")]),t._v(" "),n("h3",{attrs:{id:"副作用-side-effect"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#副作用-side-effect","aria-hidden":"true"}},[t._v("#")]),t._v(" 副作用 side effect")])])},[],!1,null,null,null);e.default=o.exports}}]);