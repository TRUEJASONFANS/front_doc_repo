(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{226:function(t,a,e){"use strict";e.r(a);var r=e(1),s=Object(r.a)({},function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"es6"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#es6","aria-hidden":"true"}},[t._v("#")]),t._v(" ES6")]),t._v(" "),e("p",[t._v("ECMAScript 6.0（简称 ES6）是 JavaScript 语言的下一代标准。它在语言层面为 JavaScript 引入了很多新语法和 API ，使得 JavaScript 语言可以用来编写复杂的大型应用程序。例如：")]),t._v(" "),e("h2",{attrs:{id:"主要特性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#主要特性","aria-hidden":"true"}},[t._v("#")]),t._v(" 主要特性")]),t._v(" "),e("p",[t._v("规范模块化；\nClass 语法；\n用 let 声明代码块内有效的变量 ，用 const 声明常量；\n箭头函数；\nasync 函数；\nSet 和 Map 数据结构。\n通过这些新特性，可以更加高效地编写代码，专注于解决问题本身。但遗憾的是不同浏览器对这些特性的支持不一致，使用了这些特性的代码可能会在部分浏览器下无法运行。为了解决兼容性问题，需要把 ES6 代码转换成 ES5 代码，Babel 是目前解决这个问题最好的工具。 Babel 的插件机制让它可灵活配置，支持把任何新语法转换成 ES5 的写法。")])])},[],!1,null,null,null);a.default=s.exports}}]);